#!/usr/bin/perl -w
#
#  Migrate from our Redis-based system to SQLite..
#
#  The DB will be located at ~/db.db for whichever user runs it.
#


use strict;

use DBI;
use Redis;


#
#  Create the DB
#
my $HOME = ( getpwuid($<) )[7];

my $db = $HOME . "/db.db";

my $create = 0;
$create = 1 if ( !-e $db );

my $dbh = DBI->connect( "dbi:SQLite:dbname=$db", "", "" );

if ($create)
{
    $dbh->do(
        "CREATE TABLE users (id INTEGER PRIMARY KEY, login, password, email, ip);"
    );
    $dbh->do(
           "CREATE TABLE records (id INTEGER PRIMARY KEY, name, token, owner)");
}




my $r = Redis->new();

foreach my $user ( $r->keys("DHCP:USER:*") )
{

    # skip things that are bogus.
    next if ( $user =~ /:(MAIL|IP|TOKEN)$/ );

    #
    #  Get the raw username.
    #
    if ( $user =~ /DHCP:USER:(.*)/ )
    {
        $user = $1;
    }

    # sanity..
    $user = lc($user);

    #
    #  Get data out of the store.
    #
    my $pass  = $r->get("DHCP:USER:$user");
    my $token = $r->get("DHCP:USER:$user:TOKEN");
    my $mail  = $r->get("DHCP:USER:$user:MAIL");
    my $ip    = $r->get("DHCP:USER:$user:IP");


    #
    #  Create the user in the db.
    #
    print "Creating: $user\n";
    my $sql = $dbh->prepare(
                "INSERT INTO users (login,password,email,ip) VALUES( ?,?,?,?)");
    $sql->execute( $user, $pass, $mail, $ip );
    $sql->finish();


    #
    #  Get the user-id of the newly created user.
    #
    $sql = $dbh->prepare("SELECT id FROM users WHERE login=?") or
      die "Failed to prepare statement";
    $sql->execute($user) or
      die "Failed to execute statement";
    my $user_id = $sql->fetchrow_array();
    $sql->finish();

    print " User-ID $user_id\n";

    #
    #  Insert the domain - for each user we currently have
    # they have a corresponding record which is the same.
    #
    $sql =
      $dbh->prepare("INSERT INTO records( name, token, owner ) VALUES( ?,?,?)")
      or
      die "Failed to prepare statement";
    $sql->execute( $user, $token, $user_id ) or
      die "Failed to execute statement";
    $sql->finish();

}
