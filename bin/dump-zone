#!/usr/bin/perl -w -Ilib/

=head1 NAME

dump-zone - Dump all records beneath our domain.

=cut

=head1 ABOUT

This script will dump all the records beneath our zone - i.e. all our users.

It is useful for diagnostics and for tracking growth, but perhaps little else.

=cut

=head1 Questions / Bug Reports

The code is developed and hosted on gitub in the following location:

=over 8

=item https://github.com/skx/dhcp.io

=back

Please raise any issues in the tracker there.

=cut

=head1 LICENSE

Copyright (c) 2014 by Steve Kemp.  All rights reserved.

This module is free software; you can redistribute it and/or modify it
under the terms of either:

a) the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version,
or

b) the Perl "Artistic License".

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut


use strict;
use warnings;

use WebService::Amazon::Route53;
use DHCP::Config;
use Getopt::Long;

#
#  Parse options: -4 / -6 / --all / --cname
#
my %CONFIG;
$CONFIG{ 'all' } = 1;

exit
  if (
       !Getopt::Long::GetOptions( "4",       \$CONFIG{ 'ipv4' },
                                  "6",       \$CONFIG{ 'ipv6' },
                                  "--cname", \$CONFIG{ 'cname' },
                                  "--all",   \$CONFIG{ 'all' } ) );

my $type = "all";
$type = "A"     if ( $CONFIG{ 'ipv4' } );
$type = "AAAA"  if ( $CONFIG{ 'ipv6' } );
$type = "CNAME" if ( $CONFIG{ 'cname' } );



#
#  Get the records.
#
my $dns =
  WebService::Amazon::Route53->new( id  => $DHCP::Config::ROUTE_53_ID,
                                    key => $DHCP::Config::ROUTE_53_KEY );

#
#  These are here to provide an offset in the iteration case.
#
#  The "fetch records" call will return no more than 100 records
# at a time.
#
my $cont     = 1;
my $tmp_name = undef;
my $tmp_type = undef;

while ($cont)
{
    my $response =
      $dns->list_resource_record_sets( zone_id => $DHCP::Config::ZONE_ID,
                                       name    => $tmp_name,
                                       type    => $tmp_type,
                                     );

    $tmp_name = $response->{ 'next_record_name' };
    $tmp_type = $response->{ 'next_record_type' };

    $cont = 0 unless ( $tmp_name && $tmp_type );

    if ( $response->{ 'resource_record_sets' } )
    {
        foreach my $ent ( @{ $response->{ 'resource_record_sets' } } )
        {
            my $r_type = $ent->{ 'type' };
            my $r_ttl  = $ent->{ 'ttl' };
            my $r_name = $ent->{ 'name' };
            my $r_val  = $ent->{ 'resource_records' }[0];

            if ( ( $type eq "all" ) ||
                 ( $type eq $r_type ) )
            {
                $r_name =~ s/\.$//g;

                print sprintf( "%30s -> %6s %40s TTL:%d\n",
                               $r_name, $r_type, $r_val,  $r_ttl );
            }

        }
    }
}
